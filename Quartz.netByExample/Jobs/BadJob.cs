using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Quartz.netByExample.Jobs
{
    [PersistJobDataAfterExecution]
    [DisallowConcurrentExecution]
    public class BadJob: IJob
    {
        public void Execute(IJobExecutionContext context)
        {
            JobKey jobKey = context.JobDetail.Key;
            JobDataMap dataMap = context.JobDetail.JobDataMap;

            int denominator = dataMap.GetInt("denominator");
            Console.WriteLine("{0} with denominator {1}", "---" + jobKey + " executing at " + DateTime.Now, denominator);

            // a contrived example of an exception that
            // will be generated by this job due to a 
            // divide by zero error (only on first run)
            try
            {
                int calculation = 4815 / denominator;
            }
            catch (Exception e)
            {
                Console.WriteLine("--- Error in job!");
                JobExecutionException e2 = new JobExecutionException(e);

                // fix denominator so the next time this job run
                // it won't fail again
                dataMap.Put("denominator", "1");

                // this job will refire immediately
                e2.RefireImmediately = true;
                throw e2;
            }

            Console.WriteLine("---{0} completed at {1}", jobKey, DateTime.Now.ToString("r"));
        }
    }
}
